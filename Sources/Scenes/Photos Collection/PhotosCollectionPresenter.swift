//
//  PhotosCollectionPresenter.swift
//  STPhotoCollection-iOS
//
//  Created by Dimitri Strauneanu on 08/08/2017.
//  Copyright (c) 2017 Streetography. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import STPhotoCore

protocol PhotosCollectionPresentationLogic {
    func presentFetchedPhotos(response: PhotosCollection.FetchPhotos.Response)
    func presentEntityDetails(response: PhotosCollection.PresentEntityDetails.Response)
    
    func presentWillFetchEntityDetails()
    func presentDidFetchEntityDetails()
    
    func presentWillFetchPhotos()
    func presentDidFetchPhotos()
    
    func presentNoPhotos()
    func presentNoMorePhotos()
    
    func presentPhotoDetailView(response: PhotosCollection.PresentPhotoDetail.Response)
}

class PhotosCollectionPresenter: PhotosCollectionPresentationLogic {
    weak var displayer: PhotosCollectionDisplayLogic?
    
    func presentEntityDetails(response: PhotosCollection.PresentEntityDetails.Response) {
        let title: String? = response.name
        let imageName: String? = self.imageNameForEntityLevel(level: response.level)
        let viewModel = PhotosCollection.PresentEntityDetails.ViewModel(title: title, imageName: imageName)
        self.displayer?.displayEntityDetails(viewModel: viewModel)
    }
    
    private func imageNameForEntityLevel(level: EntityLevel?) -> String? {
        guard let level = level else {
            return nil
        }
        switch level {
            case .location: return nil
            case .block: return "block_white_icon"
            case .neighborhood: return "neighborhood_white_icon"
            case .city: return "city_white_icon"
            case .county: return "county_white_icon"
            case .state: return "state_region_white_icon"
            case .country: return "country_white_icon"
            case .unknown: return nil
        }
    }
    
    func presentFetchedPhotos(response: PhotosCollection.FetchPhotos.Response) {
        let displayedPhotos = self.displayedPhotosFor(photos: response.photos, size: response.photoSize)
        let viewModel = PhotosCollection.FetchPhotos.ViewModel(displayedPhotos: displayedPhotos)
        self.displayer?.displayFetchedPhotos(viewModel: viewModel)
    }
    
    private func displayedPhotosFor(photos: [STPhoto], size: CGSize) -> [PhotosCollection.DisplayedPhoto] {
        var displayedPhotos: [PhotosCollection.DisplayedPhoto] = []
        for i in 0..<photos.count {
            var itemSize = size
            if i == 0 {
                itemSize.width *= 2
                itemSize.height *= 2
            }
            displayedPhotos.append(self.displayedPhotoFor(photo: photos[i], size: itemSize))
        }
        return displayedPhotos
    }
    
    private func displayedPhotoFor(photo: STPhoto, size: CGSize) -> PhotosCollection.DisplayedPhoto {
        let imageUrl: String? = photo.imageUrl
        let backgroundImageColor = UIColor(hexString: photo.dominantColor)
        let displayedPhoto = PhotosCollection.DisplayedPhoto(id: photo.id)
        displayedPhoto.imageUrl = imageUrl
        displayedPhoto.backgroundImageColor = backgroundImageColor
        return displayedPhoto
    }
    
    func presentWillFetchEntityDetails() {
        self.displayer?.displayWillFetchEntityDetails()
    }
    
    func presentDidFetchEntityDetails() {
        self.displayer?.displayDidFetchEntityDetails()
    }
    
    func presentWillFetchPhotos() {
        self.displayer?.displayWillFetchPhotos()
    }
    
    func presentDidFetchPhotos() {
        self.displayer?.displayDidFetchPhotos()
    }
    
    func presentNoPhotos() {
        self.displayer?.displayNoPhotos()
    }
    
    func presentNoMorePhotos() {
        self.displayer?.displayNoMorePhotos()
    }
    
    func presentPhotoDetailView(response: PhotosCollection.PresentPhotoDetail.Response) {
        let viewModel = PhotosCollection.PresentPhotoDetail.ViewModel(photo: response.photo)
        self.displayer?.displayPhotoDetailView(viewModel: viewModel)
    }
}
